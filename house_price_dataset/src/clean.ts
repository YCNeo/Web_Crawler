/**
 * ========================================================================== *
 *  File        : clean.ts                                                    *
 *  Purpose     : Deep-clean raw rent data and engineer core features.        *
 *                                                                            *
 *  Usage       : ts-node clean.ts [source_file] [export_file]                *
 *                                                                            *
 *  Workflow    : 1) Load rent_ori.csv                                        *
 *                2) Drop rows via getRemovalReason()                         *
 *                3) transformRow(): dates ‚Üí ISO, Â±ãÈΩ°, flags, enums ‚Ä¶        *
 *                4) Drop DROP_COLS columns                                   *
 *                5) Save rent_cln.csv & log summary                          *
 *                                                                            *
 *  Source file : /root/dataset/rent_ori.csv                                  *
 *  Export file : /root/dataset/rent_cln.csv                                  *
 *  Simple rules: ‰ΩèÂÆÖÁî®ÈÄî, ÂñÆÂÉπ>0, Âª∫Êùê/Â±§Ê¨°‚â†„ÄåË¶ãÂÖ∂‰ªñ„Äç, layout‚â§100 ‚Ä¶           *
 *  Updated     : 2025-05-26                                                  *
 * ========================================================================== *
 */

import fs from "node:fs";
import path from "node:path";
import Papa from "papaparse";
import dayjs from "dayjs";
import customParseFormat from "dayjs/plugin/customParseFormat";
import {
  getRemovalReason,
  parseTransRatio,
  transformRow,
} from "./components/helpers";
import { CleanRow, RawRow, RemoveRow } from "./types";
dayjs.extend(customParseFormat);

/* ---------- CLI ---------- */
const SRC = process.argv[2] || path.join(__dirname, "../dataset/rent_ori.csv");
const DEST = process.argv[3] || path.join(__dirname, "../dataset/rent_cln.csv");

/* ---------- Const ---------- */
export const REASONS = [
  "Áî®ÈÄî‰∏çÁ¨¶",
  "‰∫§ÊòìÊ®ôÁöÑ‰∏çÁ¨¶",
  "ÁßüË≥ÉÁ≠ÜÊ£üÊï∏‰∏çÁ¨¶",
  "Âª∫ÁØâÂÆåÊàêÂπ¥ÊúàÁº∫Â§±",
  "ÁßüË≥ÉÂπ¥ÊúàÊó•Áº∫Â§±",
  "ÁßüË≥ÉÂ±§Ê¨°‰∏çÊòé",
  "‰∏ªË¶ÅÂª∫Êùê‰∏çÊòé",
  "ÂñÆÂÉπÁÇ∫Èõ∂",
  "ÁÑ°È†àËªä‰ΩçÂá∫ÁßüÁõ∏ÈóúË≥áË®ä",
  "ÊàøÈÅéÂ§ß",
  "Âª≥ÈÅéÂ§ß",
  "Ë°õÈÅéÂ§ß",
  "Á∏ΩÈ°çÁº∫Â§±",
] as const;

export const DROP_COLS = new Set([
  "‰∫§ÊòìÊ®ôÁöÑ",
  "ÂúüÂú∞Èù¢Á©çÂπ≥ÊñπÂÖ¨Â∞∫",
  "ÈÉΩÂ∏ÇÂúüÂú∞‰ΩøÁî®ÂàÜÂçÄ",
  "ÈùûÈÉΩÂ∏ÇÂúüÂú∞‰ΩøÁî®ÂàÜÂçÄ",
  "ÈùûÈÉΩÂ∏ÇÂúüÂú∞‰ΩøÁî®Á∑®ÂÆö",
  "ÁßüË≥ÉÁ≠ÜÊ£üÊï∏",
  "ÁßüË≥ÉÊúüÈñì",
  "Ëªä‰ΩçÈ°ûÂà•",
  "Ëªä‰ΩçÈù¢Á©çÂπ≥ÊñπÂÖ¨Â∞∫",
  "Ëªä‰ΩçÁ∏ΩÈ°çÂÖÉ",
  "ÈôÑÂ±¨Ë®≠ÂÇô",
  "ÂÇôË®ª",
  "source_file",
]);

export const PURPOSE_RE =
  /‰ΩèÂÆ∂Áî®|‰ΩèÂÆÖ|ÈõÜÂêà‰ΩèÂÆÖ|Â§öÊà∂‰ΩèÂÆÖ|ÂúãÊ∞ë‰ΩèÂÆÖ|ÂÖ¨ÂØì|Èõô‰Ωµ‰ΩèÂÆÖ|Ëæ≤Ëàç|‰ΩèÂïÜÁî®|‰ΩèÂ∑•Áî®|ÂÆøËàç|ÂØÑÂÆø|‰ΩèÂÆøÂñÆÂÖÉ/;
export const EQUIP_SEP = /[„ÄÅ,Ôºå]/;
export const MAX_LAYOUT = 100;

const removed: RemoveRow = Object.fromEntries(
  REASONS.map((r) => [r, 0])
) as RemoveRow;
const cleaned: CleanRow[] = [];

/* ---------- Read CSV ---------- */
if (!fs.existsSync(SRC)) {
  console.error(`‚ùå  File not found: ${SRC}`);
  process.exit(1);
}
console.log("üîç  Cleaning ‚Ä¶");

const { data } = Papa.parse<RawRow>(fs.readFileSync(SRC, "utf8"), {
  header: true,
  skipEmptyLines: true,
  dynamicTyping: false,
});

/* ---------- Collect equipment set ---------- */
export const EQUIP_COLS = [
  ...new Set(
    data.flatMap((r) =>
      (r["ÈôÑÂ±¨Ë®≠ÂÇô"] ?? "")
        .split(EQUIP_SEP)
        .map((x) => x.trim())
        .filter(Boolean)
    )
  ),
];

/* ---------- Main loop ---------- */
for (const row of data) {
  const parsedTransRatio = parseTransRatio(row["ÁßüË≥ÉÁ≠ÜÊ£üÊï∏"]);
  const reason = getRemovalReason(row, parsedTransRatio);
  if (reason) {
    removed[reason]++;
    continue;
  }
  cleaned.push(transformRow(row, parsedTransRatio));
}

/* ---------- write ---------- */
fs.writeFileSync(DEST, Papa.unparse(cleaned), "utf8");

/* ---------- stats ---------- */
const totalRemoved = Object.values(removed).reduce((a, b) => a + b, 0);
console.log("üßπ  Cleaning summary");
Object.entries(removed).forEach(([k, v]) => console.log(`  ‚Ä¢ ${k}: ${v} rows`));
console.log(`Total removed: ${totalRemoved}`);
console.log(`Remaining rows: ${cleaned.length}`);
console.log(`‚úÖ  Clean file saved to ${DEST}`);
